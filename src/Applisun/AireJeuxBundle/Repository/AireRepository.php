<?php

namespace Applisun\AireJeuxBundle\Repository;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * AireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AireRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function getAireByVille(ContainerInterface $container, $villeId, $page)
    {
        $maxperpage = $container->getParameter('maxperpage');
        
        $query = $this->getEntityManager()
		              ->createQuery('SELECT a FROM ApplisunAireJeuxBundle:Aire a WHERE a.ville = :id')
		              ->setParameter('id', $villeId)
                              ->setFirstResult(($page-1) * $maxperpage)
                              ->setMaxResults($maxperpage);
 
        return new Paginator($query);
    }
    
    public function getCountAireByVille($villeId)
    {
        $query = $this->getEntityManager()
		              ->createQuery('SELECT a FROM ApplisunAireJeuxBundle:Aire a WHERE a.ville = :id')
		              ->setParameter('id', $villeId);
        
        return count($query->getResult());
    }
    
    public function getAllAireByVille($villeId)
    {
        return $this->getEntityManager()
		              ->createQuery('SELECT a FROM ApplisunAireJeuxBundle:Aire a WHERE a.ville = :id')
		              ->setParameter('id', $villeId)->getResult();
    }
    
    /**
     * Get 5 highest rated aire
     *
     * @return array
     */
    public function getTopAires($limit = 5)
    {
    	$qb = $this->createQueryBuilder('a');

        $query = $qb
            ->select('a, v')
            ->leftJoin('a.votes', 'v')
            ->where('a.average IS NOT NULL')
            ->orderBy('a.average', 'DESC')
            ->setFirstResult(0)
            ->setMaxResults($limit)
            ->getQuery()
        ;

        return new Paginator($query, true);
    }
    
    /**
     * Get 5 newest aire
     *
     * @return array
     */
    public function getNewAires($limit = 5)
    {
    	$qb = $this->createQueryBuilder('a');

        $query = $qb
            ->select('a')
            ->orderBy('a.createdAt', 'DESC')
            ->setFirstResult(0)
            ->setMaxResults($limit)
            ->getQuery()
        ;

        return new Paginator($query, true);
    }
    
    /**
     * Get 5 more commented aire
     *
     * @return array
     */
    public function getMoreCommentedAires($limit = 5)
    {
        
        $qb = $this->createQueryBuilder('a');
        $qb->select('a','count(a.id) as nbr');
        $qb->join('a.comments', 'c');
        $qb->groupBy('a.id');
        $qb->orderBy('nbr', 'DESC');
        $results = $qb->getQuery()->getResult();
        $aires = array();
        foreach ($results as $result){
            $aires[] = $result[0];
        }        
        return $aires;
    }
    
    /**
     * Get aire near a position
     *
     * @return array
     */
    public function getNearAires($latitude, $longitude, $perimeter)
    {
        $query = $this->getEntityManager()
		              ->createQuery('SELECT a FROM ApplisunAireJeuxBundle:Aire a INNER JOIN a.ville v INNER JOIN v.departement d  WHERE a.latitude between :lat-:perim and :lat+:perim and a.longitude between :lon-:perim and :lon+:perim')
		              ->setParameter('lat', $latitude)
                              ->setParameter('lon', $longitude)
                              ->setParameter('perim', $perimeter);
        
        return $query->getResult();
    }
    
    
    /**
     * Get favoris aires
     *
     * @return array
     */
    public function getFavorisByDate($favoris, $date = null)
    {
        //SELECT a.* FROM `aire` a INNER JOIN ville v on v.id = a.ville_id INNER JOIN departement d on d.id = v.departement_id WHERE d.id IN (34,38,39)
        /*$query = $this->getEntityManager()
		              ->createQuery('SELECT a FROM ApplisunAireJeuxBundle:Aire a '
                                      . 'INNER JOIN ApplisunAireJeuxBundle:Ville v '
                                      . 'INNER JOIN ApplisunAireJeuxBundle:Departement d '
                                      . 'WHERE d.id IN (:favoris) AND a.createdAt > :date ')
		              ->setParameter('favoris', $favoris)
                              ->setParameter('date', $date);
        
        return $query->getResult();*/
        
        $favoris = explode('|', $favoris);
        
        $qb = $this->createQueryBuilder('a');

        $query = $qb
            ->select('a')
            ->join('a.ville', 'v')
            ->join('v.departement', 'd')    
            ->where('d.id IN (:favoris)');
        if ($date)
        {
           $qb->andWhere('a.createdAt > :date')            
              ->setParameter('date', $date); 
        }            
        $qb->setParameter('favoris', $favoris);
        
        return $qb->getQuery()->getResult();
    }  
    
    /**
     * find aire by paramaters
     *
     * @return array
     */
    
    public function findAireByParametres(ContainerInterface $container, $data, $page)
    {
        $searchmaxperpage = $container->getParameter('searchmaxperpage');

    $query = $this->createQueryBuilder('a');
    $query->join('a.ville', 'v');
    $query->join('v.departement', 'd');
    $query->where('a.ageMin <= :ageMin')
    ->andWhere('a.ageMax <= :ageMax')
    ->andWhere('a.nbrJeux >= :nJeuxMin')
           
    ->setParameters(array(
                    'ageMin' => $data['ageMin'],
                    'ageMax' => $data['ageMax'],
                    'nJeuxMin' => $data['nbrJeuxMin'],
                    ));
    
    if($data['departement'] != '')
    {
        $query->andWhere('v.departement = :departement')
              ->setParameter('departement', $data['departement']);  
    }
    
    if($data['ville'] != '')
    {
        $tab = explode('|', $data['ville']);
        if (count($tab) == 2)
        {
            $query->andWhere('v.nom = :ville_nom')
                  ->andWhere('v.code = :ville_code')
                  ->setParameter('ville_nom', $tab[0])
                  ->setParameter('ville_code', $tab[1]); 
        }
        else{
            $query->andWhere('v.nom = :ville_nom')
                  ->setParameter('ville_nom', $data['ville']);  
        }
    }
    
    if ($data['noteMin'] != 0 )
    {
        $query->andWhere('a.average >= :noteMin')
               ->setParameter('noteMin', $data['noteMin']);  
    }

    if(isset($data['is_icnic']) && $data['is_icnic'])
    {
        $query->andWhere('a.is_picnic != 0');
    }

    if(isset($data['is_sport']) && $data['is_sport'])
    {
        $query->andWhere('a.is_sport != 0');
    }

    if(isset($data['is_shadow']) && $data['is_shadow'])
    {
        $query->andWhere('a.is_shadow != 0');
    }
    
    $query->setFirstResult(($page-1) * $searchmaxperpage)
                              ->setMaxResults($searchmaxperpage);
    
    return new Paginator($query);
    }
    
}
