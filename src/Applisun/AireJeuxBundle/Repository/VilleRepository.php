<?php

namespace Applisun\AireJeuxBundle\Repository;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Doctrine\ORM\Tools\Pagination\Paginator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of VilleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VilleRepository extends \Doctrine\ORM\EntityRepository
{
    public function getVilleByCompletion($queryString)
    {        
        $qb = $this->getEntityManager()
                ->createQuery('select v, count(a.id) as nbr from ApplisunAireJeuxBundle:Ville v LEFT JOIN v.aires a WHERE LOWER(v.nom) LIKE :query GROUP BY v.id ORDER BY v.nom ASC')
                ->setParameter('query', strtolower($queryString).'%');
        
        $results = $qb->getResult();
        $cities = array();
        foreach ($results as $result){
            $cities[] = array('value'=> $result['nbr'], 
                            "id" => $result[0]->getId(), 
                            "nom" => $result[0]->getNom(),
                            "slug" => $result[0]->getSlug(),
                            "code" => $result[0]->getCode());
        }                
        
        return $cities;
    }
    
    public function getVilleActiveByDepartement(ContainerInterface $container, $idDepart,$page=1)
    {
        $maxperpage = $container->getParameter('maxperpage');
        
        $query = $this->getEntityManager()
		              ->createQuery('SELECT v FROM ApplisunAireJeuxBundle:Ville v INNER JOIN v.aires a WHERE v.departement = :id')
		              ->setParameter('id', $idDepart)
                              //->orderBy('v.nom', 'ASC') 
                              ->setFirstResult(($page-1) * $maxperpage)
                              ->setMaxResults($maxperpage);
 
        return new Paginator($query);
    }    
    
    public function getCountVilleActiveByDepartement($idDepart)
    {
        $query = $this->getEntityManager()
		              ->createQuery('SELECT v FROM ApplisunAireJeuxBundle:Ville v INNER JOIN v.aires a WHERE v.departement = :id')
		              ->setParameter('id', $idDepart);
        
        return count($query->getResult());
    }
    
    /**
     * Get ville near a position
     *
     * @return array
     */
    
    public function getNearCity($lat, $lng)
    {
        $query = $this->getEntityManager()
		              ->createQuery('SELECT v FROM ApplisunAireJeuxBundle:Ville v WHERE v.latitude between :lat-0.05 and :lat+0.05 and v.longitude between :lon-0.05 and :lon+0.05')
		              ->setParameter('lat', $lat)
                              ->setParameter('lon', $lng);
        
        return $query->getResult();
    }
    
    
    /**
     * Get all cities by zone
     *
     * @return array
     */
    public function getAllAiresByDepartement($idDepart){
        $qb = $this->createQueryBuilder('v');
        $qb->select('v','count(a.id) as nbr');
        $qb->join('v.aires', 'a');
        $qb->where('v.departement= :id');
        $qb->groupBy('v.id');
        $qb->orderBy('v.nom', 'ASC');        
        $qb->setParameter('id', $idDepart);
        $results = $qb->getQuery()->getResult();
        $cities = array();
        foreach ($results as $result){
            $cities[] = array('value'=> $result['nbr'], 
                            "id" => $result[0]->getId(), 
                            "nom" => $result[0]->getNom(), 
                            "code" => $result[0]->getCode());
        }                
        
        return $cities;
    }
    
    /**
     * Get cities by list of ids
     *
     * @return array
     */
    public function getFavorisByIds($ids){
        $qb = $this->createQueryBuilder('v');
        $qb->select('v','count(a.id) as nbr');
        $qb->join('v.aires', 'a')
           ->where('v.id IN (:ids)')
           ->setParameter('ids', $ids)
           ->groupBy('v.id')
           ->orderBy('v.nom', 'ASC');
        
        $results = $qb->getQuery()->getResult();
        $cities = array();
        foreach ($results as $result){
            $cities[] = array('value'=> $result['nbr'], 
                            "id" => $result[0]->getId(), 
                            "nom" => $result[0]->getNom(), 
                            "code" => $result[0]->getCode());
        }                
        
        return $cities;
    }
    
}
